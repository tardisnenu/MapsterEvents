using Mapster;
using MapsterEvents.Core.Entities;
using MapsterEvents.Core.DTOs;

namespace MapsterEvents.Service.Mappings
{
    /// <summary>
    /// Kategori mapping yapılandırması
    /// </summary>
    public static class CategoryMappingConfig
    {
        /// <summary>
        /// Mapster yapılandırmasını uygular
        /// </summary>
        public static void ConfigureCategoryMappings()
        {
            // Category -> CategoryDto mapping
            var categoryToDtoConfig = TypeAdapterConfig<Category, CategoryDto>
                .NewConfig()
                .Map(dest => dest.EventCount, src => src.Events != null ? src.Events.Count : 0);

            // CategoryCreateDto -> Category mapping
            var createDtoToCategoryConfig = TypeAdapterConfig<CategoryCreateDto, Category>
                .NewConfig()
                .Ignore(dest => dest.Id)              // Auto-generated by DB
                .Ignore(dest => dest.CreatedAt)       // Auto-handled by DbContext
                .Ignore(dest => dest.UpdatedAt!)      // Auto-handled by DbContext
                .Ignore(dest => dest.Events);         // Navigation property

            createDtoToCategoryConfig?.Compile();

            // CategoryUpdateDto -> Category mapping  
            var updateDtoToCategoryConfig = TypeAdapterConfig<CategoryUpdateDto, Category>
                .NewConfig()
                .Ignore(dest => dest.Id)              // Should not be changed
                .Ignore(dest => dest.CreatedAt)       // Should not be changed
                .Ignore(dest => dest.UpdatedAt!)      // Auto-handled by DbContext
                .Ignore(dest => dest.Events);         // Navigation property

            updateDtoToCategoryConfig?.Compile();
        }
    }
}