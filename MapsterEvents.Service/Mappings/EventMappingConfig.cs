using Mapster;
using MapsterEvents.Core.Entities;
using MapsterEvents.Core.DTOs;
using MapsterEvents.Service.Helpers;

namespace MapsterEvents.Service.Mappings
{
    /// <summary>
    /// Etkinlik mapping yapılandırması
    /// </summary>
    public static class EventMappingConfig
    {
        /// <summary>
        /// Mapster yapılandırmasını uygular
        /// </summary>
        public static void ConfigureEventMappings()
        {
            // Event -> EventListItemDto mapping
            var eventToListItemDtoConfig = TypeAdapterConfig<Event, EventListItemDto>
                .NewConfig()
                .Map(dest => dest.CategoryName, src => src.Category != null ? src.Category.Name : string.Empty)
                .Map(dest => dest.OrganizerName, src => src.Organizer != null ? src.Organizer.FullName : string.Empty)
                .Map(dest => dest.ParticipantCount, src => src.Registrations.Count)
                .Map(dest => dest.Status, src => src.Date > DateTime.UtcNow ? "Yaklaşan" : "Geçmiş")
                .Map(dest => dest.ShortDescription, src => TextHelper.TruncateAtWord(src.Description, 150))
                .Map(dest => dest.ImageUrl, src => src.ImageUrl);

            // Event -> EventDetailDto mapping
            var eventToDetailDtoConfig = TypeAdapterConfig<Event, EventDetailDto>
                .NewConfig()
                .Map(dest => dest.CategoryName, src => src.Category != null ? src.Category.Name : string.Empty)
                .Map(dest => dest.OrganizerName, src => src.Organizer != null ? src.Organizer.FullName : string.Empty)
                .Map(dest => dest.OrganizerEmail, src => src.Organizer != null ? src.Organizer.Email : string.Empty)
                .Map(dest => dest.ImageUrl, src => src.ImageUrl)
                .Map(dest => dest.Participants, src => src.Registrations != null ? src.Registrations.Select(r => new ParticipantDto
                {
                    UserId = r.UserId,
                    FullName = r.User != null ? r.User.FullName : string.Empty,
                    Email = r.User != null ? r.User.Email : string.Empty,
                    RegistrationDate = r.RegistrationDate
                }).ToList() : new List<ParticipantDto>());

            // EventCreateDto -> Event mapping
            var createDtoToEventConfig = TypeAdapterConfig<EventCreateDto, Event>
                .NewConfig()
                .Ignore(dest => dest.Id)              // Auto-generated by DB
                .Ignore(dest => dest.CreatedAt)       // Auto-handled by DbContext
                .Ignore(dest => dest.UpdatedAt!)      // Auto-handled by DbContext
                .Ignore(dest => dest.Category)        // Navigation property
                .Ignore(dest => dest.Organizer)       // Navigation property
                .Ignore(dest => dest.Registrations);  // Navigation property
            
            createDtoToEventConfig?.Compile();

            // EventUpdateDto -> Event mapping
            var updateDtoToEventConfig = TypeAdapterConfig<EventUpdateDto, Event>
                .NewConfig()
                .Ignore(dest => dest.Id)              // Should not be changed
                .Ignore(dest => dest.CreatedAt)       // Should not be changed
                .Ignore(dest => dest.UpdatedAt!)      // Auto-handled by DbContext
                .Ignore(dest => dest.OrganizerId)     // Should not be changed in update
                .Ignore(dest => dest.Category)        // Navigation property
                .Ignore(dest => dest.Organizer)       // Navigation property
                .Ignore(dest => dest.Registrations);  // Navigation property
            
            updateDtoToEventConfig?.Compile();
        }
    }
}