using Mapster;
using MapsterEvents.Core.Entities;
using MapsterEvents.Core.DTOs;

namespace MapsterEvents.Service.Mappings
{
    /// <summary>
    /// Kullanıcı mapping yapılandırması
    /// </summary>
    public static class UserMappingConfig
    {
        /// <summary>
        /// Mapster yapılandırmasını uygular
        /// </summary>
        public static void ConfigureUserMappings()
        {
            // User -> UserDto mapping tamamen GEREKSİZ
            // Çünkü: Property isimleri ve tipleri birebir aynı
            // Mapster bunu otomatik yapar (by convention)
            // Bu blok SİLİNDİ - Mapster'ın varsayılan davranışını kullan

            // UserRegisterDto -> User mapping
            var registerDtoToUserConfig = TypeAdapterConfig<UserRegisterDto, User>
                .NewConfig()
                .Ignore(dest => dest.Id)              // Auto-generated by DB
                .Ignore(dest => dest.CreatedAt)       // Auto-handled by DbContext
                .Ignore(dest => dest.UpdatedAt!)      // Auto-handled by DbContext
                .Ignore(dest => dest.PasswordHash)    // Set manually in Service after hashing
                .Ignore(dest => dest.PasswordSalt)    // Set manually in Service after hashing
                .Ignore(dest => dest.OrganizedEvents) // Navigation property
                .Ignore(dest => dest.Registrations);  // Navigation property

            registerDtoToUserConfig?.Compile();
        }
    }
}